{"ast":null,"code":"import _toConsumableArray from\"/Users/lholmberg/Desktop/flashcards/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _createForOfIteratorHelper from\"/Users/lholmberg/Desktop/flashcards/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";var VALID_VALUES=[1,2,3,4,5,6,7,8,9];export function isValidValue(value){if(value===''){return true;}if(isNaN(value)){return false;}return VALID_VALUES.indexOf(value)!==-1;}export function isCellValid(x,y,sudoku){var value=sudoku[x][y];if(value===''){return true;}var peers=getPeers(x,y);var _iterator=_createForOfIteratorHelper(peers),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var peer=_step.value;if(sudoku[peer.x][peer.y]===value){return false;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return true;}export function getPeers(x,y){var peers=[];for(var k=0;k<9;k++){if(k!==x){peers.push({x:k,y:y});}if(k!==y){peers.push({x:x,y:k});}}var topLeftY=y-y%3;var topLeftX=x-x%3;for(var i=topLeftX;i<topLeftX+3;i++){for(var j=topLeftY;j<topLeftY+3;j++){if(j===y&&i===x){continue;}peers.push({x:i,y:j});}}return peers;}export function solve(sudoku){var puzzle=[_toConsumableArray(sudoku[0]),_toConsumableArray(sudoku[1]),_toConsumableArray(sudoku[2]),_toConsumableArray(sudoku[3]),_toConsumableArray(sudoku[4]),_toConsumableArray(sudoku[5]),_toConsumableArray(sudoku[6]),_toConsumableArray(sudoku[7]),_toConsumableArray(sudoku[8])];var cycleImprovedAnswer=true;var remainingCells=[];while(cycleImprovedAnswer){cycleImprovedAnswer=false;remainingCells=[];for(var x=0;x<9;x++){var _loop=function _loop(y){var value=puzzle[x][y];if(value){return\"continue\";}var peers=getPeers(x,y);var usedValues=[];var _iterator2=_createForOfIteratorHelper(peers),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){peer=_step2.value;usedValues.push(puzzle[peer.x][peer.y]);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}var possibleValues=VALID_VALUES.filter(function(value){return usedValues.indexOf(value)===-1;});if(possibleValues.length===1){puzzle[x][y]=possibleValues[0];cycleImprovedAnswer=true;}else if(possibleValues.length===0){alert('Input is a unsolvable puzzle.');return{v:[['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','',''],['','','','','','','','','']]};}else{remainingCells.push({x:x,y:y,possibleValues:possibleValues});}};for(var y=0;y<9;y++){var peer;var _ret=_loop(y);if(_ret===\"continue\")continue;if(typeof _ret===\"object\")return _ret.v;}}}for(var i=0;i<remainingCells.length;i++){var _remainingCells$i=remainingCells[i],_x=_remainingCells$i.x,_y=_remainingCells$i.y,possibleValues=_remainingCells$i.possibleValues;var value=puzzle[_x][_y];if(!value){value=possibleValues[0];}else{var indexOfCurrentValue=possibleValues.indexOf(value);if(indexOfCurrentValue>=possibleValues.length-1){puzzle[_x][_y]='';i=i-2;continue;}value=possibleValues[indexOfCurrentValue+1];}puzzle[_x][_y]=value;if(!isCellValid(_x,_y,puzzle)){i=i-1;continue;}}return puzzle;}","map":{"version":3,"sources":["/Users/lholmberg/Desktop/flashcards/src/store/solverHelper.js"],"names":["VALID_VALUES","isValidValue","value","isNaN","indexOf","isCellValid","x","y","sudoku","peers","getPeers","peer","k","push","topLeftY","topLeftX","i","j","solve","puzzle","cycleImprovedAnswer","remainingCells","usedValues","possibleValues","filter","length","alert","indexOfCurrentValue"],"mappings":"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","sourcesContent":["const VALID_VALUES = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nexport function isValidValue(value) {\n    if (value === '') {\n        return true\n    }\n    if (isNaN(value)) {\n        return false;\n    }\n    return VALID_VALUES.indexOf(value) !== -1\n}\n\nexport function isCellValid(x, y, sudoku) {\n    const value = sudoku[x][y]\n    if (value === '') {\n        return true\n    }\n    const peers = getPeers(x, y)\n    for(const peer of peers) {\n        if (sudoku[peer.x][peer.y] === value) {\n            return false\n        }\n    }\n    return true\n}\n\nexport function getPeers(x, y) {\n    let peers = []\n\n    for(let k = 0; k < 9; k++) {\n        if (k !== x) {\n            peers.push({\n                x: k,\n                y,\n            })\n        }\n        if (k !== y) {\n            peers.push({\n                x,\n                y: k,\n            })\n        }\n    }\n    const topLeftY = y - y % 3\n    const topLeftX = x - x % 3\n    for(let i = topLeftX; i < topLeftX + 3; i++) {\n        for(let j = topLeftY; j < topLeftY + 3; j++) {\n            if (j === y && i === x) {\n                continue\n            }\n            peers.push({\n                x: i,\n                y: j,\n            })\n        }\n    }\n    return peers\n}\n\nexport function solve(sudoku) {\n    let puzzle = [\n        [...sudoku[0]],\n        [...sudoku[1]],\n        [...sudoku[2]],\n        [...sudoku[3]],\n        [...sudoku[4]],\n        [...sudoku[5]],\n        [...sudoku[6]],\n        [...sudoku[7]],\n        [...sudoku[8]],\n    ]\n\n    let cycleImprovedAnswer = true\n    let remainingCells = []\n    while (cycleImprovedAnswer) {\n        cycleImprovedAnswer = false\n        remainingCells = []\n\n        for (let x = 0; x < 9; x++) {\n            for (let y = 0; y < 9; y++) {\n                const value = puzzle[x][y]\n                if (value) {\n                    continue\n                }\n\n                const peers = getPeers(x, y)\n                let usedValues = []\n                for (var peer of peers) {\n                    usedValues.push(puzzle[peer.x][peer.y])\n                }\n\n                const possibleValues = VALID_VALUES.filter(value => usedValues.indexOf(value) === -1)\n                if (possibleValues.length === 1) {\n                    puzzle[x][y] = possibleValues[0]\n                    cycleImprovedAnswer = true\n                } else if (possibleValues.length === 0) {\n                    alert('Input is a unsolvable puzzle.')\n                    return [\n                        ['', '', '', '', '', '', '', '', ''],\n                        ['', '', '', '', '', '', '', '', ''],\n                        ['', '', '', '', '', '', '', '', ''],\n                        ['', '', '', '', '', '', '', '', ''],\n                        ['', '', '', '', '', '', '', '', ''],\n                        ['', '', '', '', '', '', '', '', ''],\n                        ['', '', '', '', '', '', '', '', ''],\n                        ['', '', '', '', '', '', '', '', ''],\n                        ['', '', '', '', '', '', '', '', ''],\n                    ]\n                } else {\n                    remainingCells.push({\n                        x,\n                        y,\n                        possibleValues\n                    })\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < remainingCells.length; i++) {\n        const { x, y, possibleValues } = remainingCells[i]\n        let value = puzzle[x][y]\n        if (!value) {\n            value = possibleValues[0]\n        } else {\n            const indexOfCurrentValue = possibleValues.indexOf(value)\n            if (indexOfCurrentValue >= possibleValues.length - 1) {\n                puzzle[x][y] = ''\n                i = i - 2\n                continue\n            }\n            value = possibleValues[indexOfCurrentValue + 1]\n        }\n        puzzle[x][y] = value\n        if (!isCellValid(x, y, puzzle)) {\n            i = i - 1\n            continue\n        }\n    }\n    return puzzle\n}\n"]},"metadata":{},"sourceType":"module"}