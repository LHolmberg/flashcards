{"ast":null,"code":"import { createStore } from 'redux';\nimport { SET_VALUE, SELECT_CELL, SOLVE_PUZZLE, CLEAR_PUZZLES, RANDOMIZE_BOARD } from '../actions/sudokuActions';\nimport { isValidValue, isCellValid, getPeers, solve } from './solverUtils';\nexport let initalState = {\n  // state of the input board\n  input: [[8, 5, 6, '', 1, 4, 7, 3, ''], ['', 9, '', '', '', '', '', '', ''], [2, 4, '', '', '', '', 1, 6, ''], ['', 6, 2, '', 5, 9, 3, '', ''], ['', 3, 1, 8, '', 2, 4, 5, ''], ['', '', 5, 3, 4, '', 9, 2, ''], ['', 2, 4, '', '', '', '', 7, 3], ['', '', '', '', '', '', '', 1, ''], ['', 1, 8, 6, 3, '', 2, 9, 4]],\n  // highlight state for all squares. This is used to provide peer highlighting.\n  highlight: [[false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false], [false, false, false, false, false, false, false, false, false]],\n  // the solution board\n  output: [['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '']]\n};\nexport function solver() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_VALUE:\n      {\n        const {\n          x,\n          y\n        } = action.payload; // using '' to denote blank cells\n\n        const newValue = action.payload.value ? action.payload.value : ''; // copy state to avoid mutations\n\n        let nextState = {\n          input: [[...state.input[0]], [...state.input[1]], [...state.input[2]], [...state.input[3]], [...state.input[4]], [...state.input[5]], [...state.input[6]], [...state.input[7]], [...state.input[8]]],\n          output: [['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '']],\n          highlight: [...state.highlight]\n        }; // add users value\n\n        nextState.input[x][y] = newValue; // only update board if it is valid\n\n        if (isValidValue(newValue) && isCellValid(x, y, nextState.input)) {\n          return { ...nextState\n          };\n        } else {\n          return { ...state\n          };\n        }\n      }\n\n    case SELECT_CELL:\n      {\n        // copy state to avoid mutations\n        let nextSelectedState = {\n          input: [...state.input],\n          output: [...state.output],\n          highlight: [[...initalState.highlight[0]], [...initalState.highlight[1]], [...initalState.highlight[2]], [...initalState.highlight[3]], [...initalState.highlight[4]], [...initalState.highlight[5]], [...initalState.highlight[6]], [...initalState.highlight[7]], [...initalState.highlight[8]]]\n        }; // add selected cell to highlight\n\n        nextSelectedState.highlight[action.payload.x][action.payload.y] = true; // highlight all the peers of this cell\n\n        const peers = getPeers(action.payload.x, action.payload.y);\n\n        for (const peer of peers) {\n          nextSelectedState.highlight[peer.x][peer.y] = true;\n        }\n\n        return nextSelectedState;\n      }\n\n    case SOLVE_PUZZLE:\n      {\n        const output = solve(state.input);\n        const solvedState = {\n          input: [...state.input],\n          output,\n          highlight: [...state.highlight]\n        };\n        return solvedState;\n      }\n\n    case CLEAR_PUZZLES:\n      {\n        const clearedState = {\n          input: [['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '']],\n          output: [['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '']],\n          highlight: [...initalState.highlight]\n        };\n        return clearedState;\n      }\n\n    case RANDOMIZE_BOARD:\n      {\n        var inp = [['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '']];\n\n        for (var i = 0; i < 15; i++) {\n          var temp = inp;\n          var x = Math.floor(Math.random() * 9);\n          var y = Math.floor(Math.random() * 9);\n          inp[x][y] = (Math.floor(Math.random() * 9) + 1).toString();\n\n          while (!isCellValid(x, y, inp)) {\n            var a = Math.floor(Math.random() * 9);\n            var b = Math.floor(Math.random() * 9);\n            inp[a][b] = (Math.floor(Math.random() * 9) + 1).toString();\n          }\n        }\n\n        const randomizedState = {\n          input: inp,\n          output: [['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '']],\n          highlight: [...initalState.highlight]\n        };\n        return randomizedState;\n      }\n\n    default:\n      return state;\n  }\n}\nexport default createStore(solver);","map":{"version":3,"sources":["/Users/lholmberg/Desktop/flashcards/src/store/store.js"],"names":["createStore","SET_VALUE","SELECT_CELL","SOLVE_PUZZLE","CLEAR_PUZZLES","RANDOMIZE_BOARD","isValidValue","isCellValid","getPeers","solve","initalState","input","highlight","output","solver","state","action","type","x","y","payload","newValue","value","nextState","nextSelectedState","peers","peer","solvedState","clearedState","inp","i","temp","Math","floor","random","toString","a","b","randomizedState"],"mappings":"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","sourcesContent":["import { createStore } from 'redux';\nimport { SET_VALUE, SELECT_CELL, SOLVE_PUZZLE, CLEAR_PUZZLES, RANDOMIZE_BOARD } from '../actions/sudokuActions';\nimport { isValidValue, isCellValid, getPeers, solve } from './solverUtils'\n\nexport let initalState = {\n    // state of the input board\n    input: [\n        [8, 5, 6, '', 1, 4, 7, 3, ''],\n        ['', 9, '', '', '', '', '', '', ''],\n        [2, 4, '', '', '', '', 1, 6, ''],\n        ['', 6, 2, '', 5, 9, 3, '', ''],\n        ['', 3, 1, 8, '', 2, 4, 5, ''],\n        ['', '', 5, 3, 4, '', 9, 2, ''],\n        ['', 2, 4, '', '', '', '', 7, 3],\n        ['', '', '', '', '', '', '', 1, ''],\n        ['', 1, 8, 6, 3, '', 2, 9, 4],\n    ],\n    // highlight state for all squares. This is used to provide peer highlighting.\n    highlight: [\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n    ],\n    // the solution board\n    output: [\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n    ],\n}\n\nexport function solver(state = initalState, action) {\n    switch (action.type) {\n        case SET_VALUE: {\n            const { x, y } = action.payload\n            // using '' to denote blank cells\n            const newValue = action.payload.value ? action.payload.value : ''\n            // copy state to avoid mutations\n            let nextState = {\n                input: [\n                    [...state.input[0]],\n                    [...state.input[1]],\n                    [...state.input[2]],\n                    [...state.input[3]],\n                    [...state.input[4]],\n                    [...state.input[5]],\n                    [...state.input[6]],\n                    [...state.input[7]],\n                    [...state.input[8]],\n                ],\n                output: [\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                ],\n                highlight: [...state.highlight],\n            }\n            // add users value\n            nextState.input[x][y] = newValue\n            // only update board if it is valid\n            if (isValidValue(newValue) && isCellValid(x, y, nextState.input)) {\n                return {\n                    ...nextState\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n        case SELECT_CELL: {\n            // copy state to avoid mutations\n            let nextSelectedState = {\n                input: [...state.input],\n                output: [...state.output],\n                highlight: [\n                    [...initalState.highlight[0]],\n                    [...initalState.highlight[1]],\n                    [...initalState.highlight[2]],\n                    [...initalState.highlight[3]],\n                    [...initalState.highlight[4]],\n                    [...initalState.highlight[5]],\n                    [...initalState.highlight[6]],\n                    [...initalState.highlight[7]],\n                    [...initalState.highlight[8]],\n                ],\n            }\n            // add selected cell to highlight\n            nextSelectedState.highlight[action.payload.x][action.payload.y] = true\n            // highlight all the peers of this cell\n            const peers = getPeers(action.payload.x, action.payload.y)\n            for (const peer of peers) {\n                nextSelectedState.highlight[peer.x][peer.y] = true\n            }\n            return nextSelectedState\n        }\n        case SOLVE_PUZZLE: {\n            const output = solve(state.input)\n            const solvedState = {\n                input: [...state.input],\n                output,\n                highlight: [...state.highlight]\n            }\n            return solvedState\n        }\n        case CLEAR_PUZZLES: {\n            const clearedState = {\n                input: [\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                ],\n                output: [\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                ],\n                highlight: [...initalState.highlight]\n            }\n            return clearedState\n        }\n        case RANDOMIZE_BOARD: {\n            var inp = [\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', '']\n            ];\n            for(var i = 0; i < 15; i++) {\n                var temp = inp;\n                var x = Math.floor(Math.random() * 9);\n                var y = Math.floor(Math.random() * 9);\n                inp[x][y] = (Math.floor(Math.random() * 9)+1).toString();\n                while(!isCellValid(x,y,inp)) {\n                    var a = Math.floor(Math.random() * 9);\n                var b = Math.floor(Math.random() * 9);\n                inp[a][b] = (Math.floor(Math.random() * 9)+1).toString();\n                }\n            }\n\n            const randomizedState = {\n                input: inp,\n                output: [\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                ],\n                highlight: [...initalState.highlight]\n            }\n            return randomizedState\n        }\n        default:\n            return state\n    }\n}  \n\nexport default createStore(solver)\n"]},"metadata":{},"sourceType":"module"}