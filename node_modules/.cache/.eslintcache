[{"/Users/lholmberg/Desktop/flashcards/src/index.js":"1","/Users/lholmberg/Desktop/flashcards/src/actions/sudokuActions.js":"2","/Users/lholmberg/Desktop/flashcards/src/store/store.js":"3","/Users/lholmberg/Desktop/flashcards/src/components/Sudoku.js":"4","/Users/lholmberg/Desktop/flashcards/src/components/Grid.js":"5","/Users/lholmberg/Desktop/flashcards/src/containers/CellContainer.js":"6","/Users/lholmberg/Desktop/flashcards/src/components/Cell.js":"7","/Users/lholmberg/Desktop/flashcards/src/store/solverHelper.js":"8","/Users/lholmberg/Desktop/flashcards/src/App.js":"9"},{"size":168,"mtime":1644191055429,"results":"10","hashOfConfig":"11"},{"size":782,"mtime":1644188598464,"results":"12","hashOfConfig":"11"},{"size":7715,"mtime":1644191234906,"results":"13","hashOfConfig":"11"},{"size":2023,"mtime":1644176723996,"results":"14","hashOfConfig":"11"},{"size":1362,"mtime":1644190819175,"results":"15","hashOfConfig":"11"},{"size":825,"mtime":1644191130946,"results":"16","hashOfConfig":"11"},{"size":739,"mtime":1644178691547,"results":"17","hashOfConfig":"11"},{"size":3950,"mtime":1644191195308,"results":"18","hashOfConfig":"11"},{"size":1289,"mtime":1644191095091,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"ib7xd",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/lholmberg/Desktop/flashcards/src/index.js",[],[],["49","50"],"/Users/lholmberg/Desktop/flashcards/src/actions/sudokuActions.js",[],[],"/Users/lholmberg/Desktop/flashcards/src/store/store.js",["51"],[],"import { createStore } from 'redux';\nimport { SET_VALUE, SELECT_CELL, SOLVE_PUZZLE, CLEAR_PUZZLES, RANDOMIZE_BOARD } from '../actions/sudokuActions';\nimport { isValidValue, isCellValid, getPeers, solve } from './solverHelper'\n\nexport let initalState = {\n    input: [\n        [8, 5, 6, '', 1, 4, 7, 3, ''],\n        ['', 9, '', '', '', '', '', '', ''],\n        [2, 4, '', '', '', '', 1, 6, ''],\n        ['', 6, 2, '', 5, 9, 3, '', ''],\n        ['', 3, 1, 8, '', 2, 4, 5, ''],\n        ['', '', 5, 3, 4, '', 9, 2, ''],\n        ['', 2, 4, '', '', '', '', 7, 3],\n        ['', '', '', '', '', '', '', 1, ''],\n        ['', 1, 8, 6, 3, '', 2, 9, 4],\n    ],\n    highlight: [\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n        [false, false, false, false, false, false, false, false, false],\n    ],\n    output: [\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n        ['', '', '', '', '', '', '', '', ''],\n    ],\n}\n\nexport function solver(state = initalState, action) {\n    switch (action.type) {\n        case SET_VALUE: {\n            const { x, y } = action.payload\n            const newValue = action.payload.value ? action.payload.value : ''\n            let nextState = {\n                input: [\n                    [...state.input[0]],\n                    [...state.input[1]],\n                    [...state.input[2]],\n                    [...state.input[3]],\n                    [...state.input[4]],\n                    [...state.input[5]],\n                    [...state.input[6]],\n                    [...state.input[7]],\n                    [...state.input[8]],\n                ],\n                output: [\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                ],\n                highlight: [...state.highlight],\n            }\n            nextState.input[x][y] = newValue\n            if (isValidValue(newValue) && isCellValid(x, y, nextState.input)) {\n                return {\n                    ...nextState\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n        case SELECT_CELL: {\n            let nextSelectedState = {\n                input: [...state.input],\n                output: [...state.output],\n                highlight: [\n                    [...initalState.highlight[0]],\n                    [...initalState.highlight[1]],\n                    [...initalState.highlight[2]],\n                    [...initalState.highlight[3]],\n                    [...initalState.highlight[4]],\n                    [...initalState.highlight[5]],\n                    [...initalState.highlight[6]],\n                    [...initalState.highlight[7]],\n                    [...initalState.highlight[8]],\n                ],\n            }\n            nextSelectedState.highlight[action.payload.x][action.payload.y] = true\n            const peers = getPeers(action.payload.x, action.payload.y)\n            for (const peer of peers) {\n                nextSelectedState.highlight[peer.x][peer.y] = true\n            }\n            return nextSelectedState\n        }\n        case SOLVE_PUZZLE: {\n            const output = solve(state.input)\n            const solvedState = {\n                input: [...state.input],\n                output,\n                highlight: [...state.highlight]\n            }\n            return solvedState\n        }\n        case CLEAR_PUZZLES: {\n            const clearedState = {\n                input: [\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                ],\n                output: [\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                ],\n                highlight: [...initalState.highlight]\n            }\n            return clearedState\n        }\n        case RANDOMIZE_BOARD: {\n            var inp = [\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', ''],\n                ['', '', '', '', '', '', '', '', '']\n            ];\n            for(var i = 0; i < 60; i++) {\n                var temp = inp;\n                var x = Math.floor(Math.random() * 9);\n                var y = Math.floor(Math.random() * 9);\n                inp[x][y] = (Math.floor(Math.random() * 9)+1);\n                if(!isCellValid(x,y,inp)) {\n                    inp[x][y] = '';\n                }\n            }\n\n            const randomizedState = {\n                input: inp,\n                output: [\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                    ['', '', '', '', '', '', '', '', ''],\n                ],\n                highlight: [...initalState.highlight]\n            }\n            return randomizedState\n        }\n        default:\n            return state\n    }\n}  \n\nexport default createStore(solver)\n","/Users/lholmberg/Desktop/flashcards/src/components/Sudoku.js",[],[],"/Users/lholmberg/Desktop/flashcards/src/components/Grid.js",[],[],"/Users/lholmberg/Desktop/flashcards/src/containers/CellContainer.js",[],[],"/Users/lholmberg/Desktop/flashcards/src/components/Cell.js",[],[],"/Users/lholmberg/Desktop/flashcards/src/store/solverHelper.js",[],[],"/Users/lholmberg/Desktop/flashcards/src/App.js",[],[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":155,"column":21,"nodeType":"58","messageId":"59","endLine":155,"endColumn":25},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'temp' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]